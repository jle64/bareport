<html>
<head>
<title>bareport - clients list</title>
<link rel="stylesheet" href="styles.css">
<link rel="icon" type="image/png" href="logo.png" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta charset="UTF-8">
</head>
<body>
<div class="navbar">
  Clients list
  | <a href="all_clients.html">Clients overview</a>
  | <a href="nodata.html">Clients without data</a>
</div>
<h1>Clients list</h1>
<table id="clients_table">
  <tr>
    <td onclick="sortTable(0, 'str')"><b>Name ðŸ ¹ðŸ »</b></td>
    <td><b>Graphs</b></td>
    <td onclick="sortTable(2, 'int')"><b>Hosts ðŸ ¹ðŸ »</b></td>
    <td onclick="sortTable(3, 'int')"><b>Size (Gio) ðŸ ¹ðŸ »</b></td>
    <td onclick="sortTable(4, 'str')"><b>BareOS instances ðŸ ¹ðŸ »</b></td>
    <td><b>Data</b></td>
  </tr>
  {%- for client in clients %}
  <tr>
    <td>{{ client }}</td>
    <td>
      <a href="svg/treemaps/clients/{{ client }}.svg">repartition</a>
      | <a href="svg/timelines/clients/{{ client }}.svg">evolution</a>
      | <a href="clients/{{ client }}.html">all graphs</a>
    </td>
    <td>{{ clients[client]["hosts"] | length }}</td>
    <td>{{ (clients[client]["total"].items() | sort | last | last / 2**30) | round(1) }}</td>
    <td>{{ " ".join(clients[client]["instances"]) }}</td>
    <td>
      <a href="html/timelines/clients/{{ client }}.html">table</a>
      | <a href="json/{{ client }}.json">json</a>
    </td>
  </tr>
  {%- endfor -%}
</table>

<script>
/* Source: https://www.w3schools.com/howto/howto_js_sort_table.asp */
function sortTable(n, type) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("clients_table");
  switching = true;
  // Set the sorting direction to ascending:
  dir = "asc";
  /* Make a loop that will continue until
  no switching has been done: */
  while (switching) {
    // Start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /* Loop through all table rows (except the
    first, which contains table headers): */
    for (i = 1; i < (rows.length - 1); i++) {
      // Start by saying there should be no switching:
      shouldSwitch = false;
      /* Get the two elements you want to compare,
      one from current row and one from the next: */
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /* Check if the two rows should switch place,
      based on the direction, asc or desc: */
      if (dir == "asc" && type == "int") {
        if (parseInt(x.innerHTML, 10) > parseInt(y.innerHTML, 10)) {
          shouldSwitch = true;
          break;
        }
      } else if (dir == "desc" && type == "int") {
        if (parseInt(x.innerHTML, 10) < parseInt(y.innerHTML, 10)) {
          shouldSwitch = true;
          break;
        }
      } else if (dir == "asc") {
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          shouldSwitch = true;
          break;
        }
      } else if (dir == "desc") {
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /* If a switch has been marked, make the switch
      and mark that a switch has been done: */
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      // Each time a switch is done, increase this count by 1:
      switchcount ++;
    } else {
      /* If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again. */
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}
</script>
</body>
</html>
